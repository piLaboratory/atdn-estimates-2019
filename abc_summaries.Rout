
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R é um software livre e vem sem GARANTIA ALGUMA.
Você pode redistribuí-lo sob certas circunstâncias.
Digite 'license()' ou 'licence()' para detalhes de distribuição.

R é um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informações e
'citation()' para saber como citar o R ou pacotes do R em publicações.

Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

[Área de trabalho anterior carregada]

> source("functions.R")
Carregando pacotes exigidos: stats4
Carregando pacotes exigidos: splines
Carregando pacotes exigidos: permute
Carregando pacotes exigidos: lattice
Registered S3 method overwritten by 'vegan':
  method       from
  plot.preston untb
This is vegan 2.5-4

Attaching package: ‘vegan’

The following object is masked from ‘package:VGAM’:

    calibrate

Carregando pacotes exigidos: bbmle

Attaching package: ‘bbmle’

The following object is masked from ‘package:VGAM’:

    AICc


Attaching package: ‘sads’

The following objects are masked from ‘package:VGAM’:

    dpareto, dzipf, ppareto, pzipf, qpareto, qzipf, rpareto, rzipf

Carregando pacotes exigidos: abc.data
Carregando pacotes exigidos: nnet
Carregando pacotes exigidos: quantreg
Carregando pacotes exigidos: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

Carregando pacotes exigidos: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:untb’:

    select

Carregando pacotes exigidos: locfit
locfit 1.5-9.1 	 2013-03-22
> library(abc)
> library(parallel)
> ## Basic quantities and original (biased estimates), from script 'dataprep.R'
> load("lists_with_all_objects.RData")
> 
> 
> ################################################################################
> ## 2013 original data##
> ################################################################################
> ## results of simulations for ABC, from script 'simulations_abc/2013/abc_run2013[a,b].R' and then applying 'simulations_abc/2013/join_simulations.R'
> load("abcFinal2013.RData") 
> ## Use only the summary statistics of the simulations with noise in
> ## estimated total population sizes (see abc2019run.R) 
> abc2013$sims <- abc2013$sims[,5:8]
> 
> ## Model selection
> ## Target: observed number of species, Simpson's species-equivalents,
> ## mean and sd of log abundances
> target <- c( atdn.13$Sobs,
+             D(atdn.13$data$population),
+             mean(log(atdn.13$data$population)),
+             sd(log(atdn.13$data$population))
+             )
> 
> ## Diagnostics plots
> ## Box plots of each target variable
> par(mfrow=c(2,2))
> for(i in 1:ncol(abc2013$sims)){
+     boxplot(abc2013$sims[,i]~abc2013$labels,
+             main=colnames(abc2013$sims)[i], log="y")
+     abline(h=target[i], lty=2, col="blue")
+     }
> par(mfrow=c(1,1))
> 
> 
> ## Model selection ##
> 
> ## Cross-validation
> cv.modsel <- cv4postpr(abc2013$labels, abc2013$sims,
+                        nval=100, tol= c(0.05, 0.025, 0.01),
+                        method="rejection")
> summary(cv.modsel)
Confusion matrix based on 100 samples for each model.

$tol0.01
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      89    11       0     0       0     0
LNrnd        17    83       0     0       0     0
LSclump       0     0      93     7       0     0
LSrnd         0     0       6    94       0     0
NBclump       0     0       2     0      90     8
NBrnd         0     0       5     0       6    89

$tol0.025
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      89    11       0     0       0     0
LNrnd        23    77       0     0       0     0
LSclump       0     0      93     7       0     0
LSrnd         0     0       7    93       0     0
NBclump       0     0       6     0      78    16
NBrnd         0     0       6     0      12    82

$tol0.05
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      87    13       0     0       0     0
LNrnd        50    50       0     0       0     0
LSclump       0     0      90    10       0     0
LSrnd         0     0      10    90       0     0
NBclump       0     0      12     0      55    33
NBrnd         0     0       8     0      29    63


Mean model posterior probabilities (rejection)

$tol0.01
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.6692 0.3308  0.0000 0.0000  0.0000 0.0000
LNrnd    0.3643 0.6357  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.8043 0.1871  0.0038 0.0048
LSrnd    0.0000 0.0000  0.1840 0.8127  0.0007 0.0026
NBclump  0.0000 0.0000  0.0118 0.0001  0.5392 0.4488
NBrnd    0.0000 0.0000  0.0325 0.0056  0.4373 0.5246

$tol0.025
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.5912 0.4088  0.0000 0.0000  0.0000 0.0000
LNrnd    0.4384 0.5616  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.6627 0.3267  0.0046 0.0060
LSrnd    0.0000 0.0000  0.3316 0.6617  0.0009 0.0058
NBclump  0.0000 0.0000  0.0362 0.0021  0.4880 0.4738
NBrnd    0.0000 0.0000  0.0363 0.0120  0.4678 0.4839

$tol0.05
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.5476 0.4524  0.0000 0.0000  0.0000 0.0000
LNrnd    0.4856 0.5144  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.5521 0.4335  0.0064 0.0080
LSrnd    0.0000 0.0000  0.4421 0.5469  0.0018 0.0091
NBclump  0.0000 0.0000  0.0701 0.0182  0.4567 0.4550
NBrnd    0.0000 0.0000  0.0404 0.0252  0.4648 0.4697

> 
> ## Model selection
> model.sel <- postpr(target = target,
+                     index=abc2013$labels,
+                     sumstat = abc2013$sims,
+                     tol=0.01, method="rejection",
+                     corr=TRUE)
> summary(model.sel)
Call: 
postpr(target = target, index = abc2013$labels, sumstat = abc2013$sims, 
    tol = 0.01, method = "rejection", corr = TRUE)
Data:
 postpr.out$values (600 posterior samples)
Models a priori:
 LNclump, LNrnd, LSclump, LSrnd, NBclump, NBrnd
Models a posteriori:
 LNclump, LNrnd, LSclump, LSrnd, NBclump, NBrnd

Proportion of accepted simulations (rejection):
LNclump   LNrnd LSclump   LSrnd NBclump   NBrnd 
 0.0000  0.0000  0.7050  0.2917  0.0033  0.0000 

Bayes factors:
         LNclump    LNrnd  LSclump    LSrnd  NBclump    NBrnd
LNclump                     0.0000   0.0000   0.0000         
LNrnd                       0.0000   0.0000   0.0000         
LSclump      Inf      Inf   1.0000   2.4171 211.5000      Inf
LSrnd        Inf      Inf   0.4137   1.0000  87.5000      Inf
NBclump      Inf      Inf   0.0047   0.0114   1.0000      Inf
NBrnd                       0.0000   0.0000   0.0000         


> 
> ## Selected model(s): check from the command above and write the selected model(s) in the following command
> 
> index <- abc2013$labels=="LSclump" # write here the code of the selected model(s)
> 
> ## Goodness of fit of the selected model
> nrep <- 200
> gof <- gfit(target = target,
+             sumstat = abc2013$sims[index,],
+             nb.replicate = nrep, tol = 0.025)
> sgof <- summary(gof)
> p.legend <- ifelse(sgof$pvalue==0,
+                    paste("p < 1/",nrep,sep=""),
+                    paste("p =",sgof$pvalue))
> plot(gof)
> mtext(p.legend)
> 
> 
> ## Parameter estimation ##
> ## Cross validation
> cv.rej <- cv4abc(param = data.frame(S=abc2013$params[index]),
+        sumstat = abc2013$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="rejection")
> cv.neural <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="neuralnet")
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
> cv.ll <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="loclinear")
> cv.ridge <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="ridge")












































































































































































































































































































> ## Cehcks the method and tolerance with smaller error
> summary(cv.rej)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.003225859
0.025 0.003773103
0.05  0.004683955
> summary(cv.neural)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.002984814
0.025 0.003308535
0.05  0.003331049
> summary(cv.ll)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.001626997
0.025 0.001617479
0.05  0.001743684
> summary(cv.ridge)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.001903104
0.025 0.002142394
0.05  0.002591421
> ## Chosen loclinear as ridge with tol=0.01 is has a slightly smaller error but returns posteriors with negative values
> ## Chose tol=0.05 as the difference in loclinear among tolerance levels is less than 1e-5, and tol=0.5 enables a posterior drawn from more simulated values
> 
> ## Posterior distribution of Species richness from the selected model
> S.post1 <- abc(target = target, param=data.frame(S=abc2013$params[index]),
+               sumstat = abc2013$sims[index,],
+               tol=0.05, method="loclinear")
> summary(S.post1)
Call: 
abc(target = target, param = data.frame(S = abc2013$params[index]), 
    sumstat = abc2013$sims[index, ], tol = 0.05, method = "loclinear")
Data:
 abc.out$adj.values (500 posterior samples)
Weights:
 abc.out$weights

                              S
Min.:                  16138.15
Weighted 2.5 % Perc.:  16145.22
Weighted Median:       16163.76
Weighted Mean:         16163.64
Weighted Mode:         16161.27
Weighted 97.5 % Perc.: 16180.56
Max.:                  16191.92
> hist(S.post1)
> 
> ## stores all relevant objects in a list
> abc2013.summ <- list(target=target,
+                    cv.modsel=cv.modsel, model.sel=model.sel,
+                    index=index, gof=gof,
+                    sgof=sgof, p.legend=p.legend,
+                    cv.rej=cv.rej, S.post1=S.post1)
> 
> 
> ################################################################################
> ## 2013 revised taxonomy ##
> ################################################################################
> load("abcFinal2013tax2019.RData")
> ## Use only the summary statistics of the simulations with noise in
> ## estimated total population sizes (see abc2019run.R) 
> abc2013t$sims <- abc2013t$sims[,5:8]
> 
> ## Model selection
> ## Target: observed number of species, Simpson's species equivalent,
> ## mean and sd of log abundances
> 
> target <- c( atdn.13.tax$Sobs,
+             D(atdn.13.tax$data$population),
+             mean(log(atdn.13.tax$data$population)),
+             sd(log(atdn.13.tax$data$population))
+             )
> 
> ## Diagnostics plots
> ## Box plots of each target variable
> par(mfrow=c(2,2))
> for(i in 1:ncol(abc2013t$sims)){
+     boxplot(abc2013t$sims[,i]~abc2013t$labels,
+             main=colnames(abc2013t$sims)[i], log="y")
+     abline(h=target[i], lty=2, col="blue")
+     }
> par(mfrow=c(1,1))
> 
> 
> ## Model selection ##
> 
> ## Cross-validation
> cv.modsel <- cv4postpr(abc2013t$labels, abc2013t$sims,
+                        nval=100, tol= c(0.05, 0.025, 0.01),
+                        method="rejection")
> summary(cv.modsel)
Confusion matrix based on 100 samples for each model.

$tol0.01
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      94     6       0     0       0     0
LNrnd        10    90       0     0       0     0
LSclump       0     0      97     3       0     0
LSrnd         0     0       3    97       0     0
NBclump       0     0       0     0      96     4
NBrnd         0     0       0     0      19    81

$tol0.025
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      89    11       0     0       0     0
LNrnd        21    79       0     0       0     0
LSclump       0     0      93     7       0     0
LSrnd         0     0       6    94       0     0
NBclump       0     0       6     0      75    19
NBrnd         0     0       3     0      59    38

$tol0.05
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      88    12       0     0       0     0
LNrnd        42    58       0     0       0     0
LSclump       0     0      91     9       0     0
LSrnd         0     0       7    93       0     0
NBclump       0     0      12     0      85     3
NBrnd         0     0       4     0      80    16


Mean model posterior probabilities (rejection)

$tol0.01
        LNclump LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump   0.739 0.261  0.0000 0.0000  0.0000 0.0000
LNrnd     0.292 0.708  0.0000 0.0000  0.0000 0.0000
LSclump   0.000 0.000  0.8706 0.1293  0.0000 0.0001
LSrnd     0.000 0.000  0.1220 0.8780  0.0000 0.0000
NBclump   0.000 0.000  0.0089 0.0001  0.5042 0.4868
NBrnd     0.000 0.000  0.0076 0.0009  0.4896 0.5019

$tol0.025
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.6244 0.3756  0.0000 0.0000  0.0000 0.0000
LNrnd    0.3857 0.6143  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.7413 0.2573  0.0000 0.0015
LSrnd    0.0000 0.0000  0.2569 0.7431  0.0000 0.0000
NBclump  0.0000 0.0000  0.0370 0.0016  0.4828 0.4785
NBrnd    0.0000 0.0000  0.0175 0.0020  0.4896 0.4909

$tol0.05
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.5549 0.4451  0.0000 0.0000  0.0000 0.0000
LNrnd    0.4525 0.5475  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.6042 0.3918  0.0001 0.0039
LSrnd    0.0000 0.0000  0.4009 0.5990  0.0000 0.0001
NBclump  0.0000 0.0000  0.0751 0.0037  0.4620 0.4591
NBrnd    0.0000 0.0000  0.0391 0.0045  0.4786 0.4777

> 
> ## Model selection
> model.sel <- postpr(target = target,
+                     index=abc2013t$labels,
+                     sumstat = abc2013t$sims,
+                     tol=0.01, method="rejection",
+                     corr=TRUE)
> summary(model.sel)
Call: 
postpr(target = target, index = abc2013t$labels, sumstat = abc2013t$sims, 
    tol = 0.01, method = "rejection", corr = TRUE)
Data:
 postpr.out$values (508 posterior samples)
Models a priori:
 LNclump, LNrnd, LSclump, LSrnd, NBclump, NBrnd
Models a posteriori:
 LNclump, LNrnd, LSclump, LSrnd, NBclump, NBrnd
Warning: Posterior model probabilities are corrected for unequal number of simulations per models.


Proportion of accepted simulations (rejection):
LNclump   LNrnd LSclump   LSrnd NBclump   NBrnd 
 0.0000  0.0000  0.7579  0.2421  0.0000  0.0000 

Bayes factors:
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump                 0.0000 0.0000               
LNrnd                   0.0000 0.0000               
LSclump     Inf    Inf  1.0000 3.1301     Inf    Inf
LSrnd       Inf    Inf  0.3195 1.0000     Inf    Inf
NBclump                 0.0000 0.0000               
NBrnd                   0.0000 0.0000               


> ## Selected model(s)
> index <- abc2013t$labels=="LSclump"
> 
> 
> ## Goodness of fit the models
> nrep <- 200
> gof <- gfit(target = target,
+             sumstat = abc2013t$sims[index,],
+             nb.replicate = nrep, tol = 0.025)
> sgof <- summary(gof)
> p.legend <- ifelse(sgof$pvalue==0,
+                    paste("p < 1/",nrep,sep=""),
+                    paste("p =",sgof$pvalue))
> plot(gof)
> mtext(p.legend)
> 
> 
> ## Parameter estimation ##
> ## Cross validation
> cv.rej <- cv4abc(param = data.frame(S=abc2013t$params[index]),
+        sumstat = abc2013t$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="rejection")
> cv.neural <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="neuralnet")
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
> cv.ll <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="loclinear")
> cv.ridge <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="ridge")












































































































































































































































































































> ## Checks the method and tolerance with smaller error
> summary(cv.rej)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.001999828
0.025 0.002452912
0.05  0.002870827
> summary(cv.neural)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.003585678
0.025 0.003722721
0.05  0.003328634
> summary(cv.ll)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.001457107
0.025 0.001640900
0.05  0.001855270
> summary(cv.ridge)
Prediction error based on a cross-validation sample of 100

                S
0.01  0.005069287
0.025 0.008671894
0.05  0.012977234
> ## Loc-linear with tol=0.01
> 
> ## Posterior distribution of Species richness from the selected model
> S.post1 <- abc(target = target, param=data.frame(S=abc2013t$params[index]),
+               sumstat = abc2013t$sims[index,],
+               tol=0.01, method="loclinear")
> 
> summary(S.post1)
Call: 
abc(target = target, param = data.frame(S = abc2013t$params[index]), 
    sumstat = abc2013t$sims[index, ], tol = 0.01, method = "loclinear")
Data:
 abc.out$adj.values (100 posterior samples)
Weights:
 abc.out$weights

                              S
Min.:                  14538.47
Weighted 2.5 % Perc.:  14746.78
Weighted Median:       14950.65
Weighted Mean:         14940.69
Weighted Mode:         14873.35
Weighted 97.5 % Perc.: 15131.96
Max.:                  15168.43
> hist(S.post1)
> 
> ## stores all relevant objects in a list
> abc2013t.summ <- list(target=target,
+                    cv.modsel=cv.modsel, model.sel=model.sel,
+                    index=index, gof=gof,
+                    sgof=sgof, p.legend=p.legend,
+                    cv.rej=cv.rej, S.post1=S.post1)
> 
> ################################################################################
> ## 2019 ##
> ################################################################################
> load("abcFinal2019.RData")
> ## Use only the summary statistics of the simulations with noise in
> ## estimated total population sizes (see abc2019run.R) 
> abc2019$sims <- abc2019$sims[,5:8]
> 
> ## Model selection
> ## Target: observed number of species, lmean, sdmean of log abundances 
> target <- c( atdn.19$Sobs,
+            D(atdn.19$data$population), 
+            mean(log(atdn.19$data$population)),
+            sd(log(atdn.19$data$population))
+            )
> 
> ## Quick diagnostics plots
> ## Box plots of each target variable
> ## 
> par(mfrow=c(2,2))
> for(i in 1:ncol(abc2019$sims)){
+     boxplot(abc2019$sims[,i]~abc2019$labels,
+             main=colnames(abc2019$sims)[i], log="y")
+     abline(h=target[i], lty=2, col="blue")
+     }
> par(mfrow=c(1,1))
> 
> 
> ## Model selection ##
> 
> ## Cross-validation
> cv.modsel <- cv4postpr(abc2019$labels, abc2019$sims,
+                        nval=100, tol= c(0.05, 0.025, 0.01),
+                        method="rejection")
> summary(cv.modsel)
Confusion matrix based on 100 samples for each model.

$tol0.01
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      99     1       0     0       0     0
LNrnd         7    93       0     0       0     0
LSclump       0     0     100     0       0     0
LSrnd         0     0       1    99       0     0
NBclump       0     0       1     0      88    11
NBrnd         0     0       3     0       6    91

$tol0.025
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      99     1       0     0       0     0
LNrnd         7    93       0     0       0     0
LSclump       0     0     100     0       0     0
LSrnd         0     0       1    99       0     0
NBclump       0     0      10     0      75    15
NBrnd         0     0       4     0       2    94

$tol0.05
        LNclump LNrnd LSclump LSrnd NBclump NBrnd
LNclump      98     2       0     0       0     0
LNrnd        11    89       0     0       0     0
LSclump       0     0      97     3       0     0
LSrnd         0     0       3    97       0     0
NBclump       0     0      17     0      43    40
NBrnd         0     0       9     0      15    76


Mean model posterior probabilities (rejection)

$tol0.01
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.9321 0.0679  0.0000 0.0000  0.0000 0.0000
LNrnd    0.1046 0.8954  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.9516 0.0398  0.0003 0.0083
LSrnd    0.0000 0.0000  0.0492 0.9508  0.0000 0.0000
NBclump  0.0000 0.0000  0.0219 0.0000  0.5291 0.4490
NBrnd    0.0000 0.0000  0.0202 0.0018  0.4527 0.5254

$tol0.025
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.8441 0.1559  0.0000 0.0000  0.0000 0.0000
LNrnd    0.1973 0.8027  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.8461 0.1382  0.0016 0.0141
LSrnd    0.0000 0.0000  0.1508 0.8485  0.0000 0.0007
NBclump  0.0000 0.0000  0.0549 0.0001  0.4813 0.4637
NBrnd    0.0000 0.0000  0.0278 0.0058  0.4766 0.4898

$tol0.05
        LNclump  LNrnd LSclump  LSrnd NBclump  NBrnd
LNclump  0.6994 0.3006  0.0000 0.0000  0.0000 0.0000
LNrnd    0.3350 0.6650  0.0000 0.0000  0.0000 0.0000
LSclump  0.0000 0.0000  0.6615 0.3157  0.0066 0.0162
LSrnd    0.0000 0.0000  0.3380 0.6576  0.0000 0.0044
NBclump  0.0000 0.0000  0.1037 0.0037  0.4496 0.4430
NBrnd    0.0000 0.0000  0.0596 0.0337  0.4508 0.4559

> 
> ## Model selection
> model.sel <- postpr(target = target,
+                     index=abc2019$labels,
+                     sumstat = abc2019$sims,
+                     tol=0.01, method="rejection",
+                     corr=TRUE)
> summary(model.sel)
Call: 
postpr(target = target, index = abc2019$labels, sumstat = abc2019$sims, 
    tol = 0.01, method = "rejection", corr = TRUE)
Data:
 postpr.out$values (570 posterior samples)
Models a priori:
 LNclump, LNrnd, LSclump, LSrnd, NBclump, NBrnd
Models a posteriori:
 LNclump, LNrnd, LSclump, LSrnd, NBclump, NBrnd
Warning: Posterior model probabilities are corrected for unequal number of simulations per models.


Proportion of accepted simulations (rejection):
LNclump   LNrnd LSclump   LSrnd NBclump   NBrnd 
 0.0000  0.0000  0.9123  0.0877  0.0000  0.0000 

Bayes factors:
        LNclump   LNrnd LSclump   LSrnd NBclump   NBrnd
LNclump                  0.0000  0.0000                
LNrnd                    0.0000  0.0000                
LSclump     Inf     Inf  1.0000 10.4000     Inf     Inf
LSrnd       Inf     Inf  0.0962  1.0000     Inf     Inf
NBclump                  0.0000  0.0000                
NBrnd                    0.0000  0.0000                


> ## Selected model(s)
> index <- abc2019$labels=="LSclump"
> 
> ## Goodness of fit the models
> nrep <- 200
> gof <- gfit(target = target,
+             sumstat = abc2019$sims[index,],
+             nb.replicate = nrep, tol = 0.01)
> sgof <- summary(gof)
> p.legend <- ifelse(sgof$pvalue==0,
+                    paste("p < 1/",nrep,sep=""),
+                    paste("p =",sgof$pvalue))
> plot(gof)
> mtext(p.legend)
> 
> 
> ## Parameter estimation ##
> ## Cross validation
> cv.rej <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="rejection")
> cv.neural <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="neuralnet")
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
12345678910
> cv.ll <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="loclinear")
> cv.ridge <- cv4abc(param = data.frame(S=abc2019$params[index]),
+        sumstat = abc2019$sims[index,],
+        tols=c(0.05, 0.025, 0.01), nval=100, method="ridge")












































































































































































































































































































> ## Loclinear with tol=0.05
> 
> ## Posterior distribution of Species richness from the selected model
> S.post1 <- abc(target = target, param=data.frame(S=abc2019$params[index]),
+               sumstat = abc2019$sims[index,],
+               tol=0.05, method="loclinear", numnet=100)
> 
> summary(S.post1)
Call: 
abc(target = target, param = data.frame(S = abc2019$params[index]), 
    sumstat = abc2019$sims[index, ], tol = 0.05, method = "loclinear", 
    numnet = 100)
Data:
 abc.out$adj.values (500 posterior samples)
Weights:
 abc.out$weights

                              S
Min.:                  15485.58
Weighted 2.5 % Perc.:  15556.79
Weighted Median:       15671.26
Weighted Mean:         15666.44
Weighted Mode:         15677.99
Weighted 97.5 % Perc.: 15748.88
Max.:                  15817.95
> hist(S.post1)
> 
> 
> ## stores all relevant objects in a list
> abc2019.summ <- list(target=target,
+                    cv.modsel=cv.modsel, model.sel=model.sel,
+                    index=index, gof=gof,
+                    sgof=sgof, p.legend=p.legend,
+                    ##cv.nn=cv.nn,
+                    S.post1=S.post1)
> 
> save(abc2013.summ, abc2013t.summ, abc2019.summ, file="abcSummaries.RData")
> 
> proc.time()
  usuário   sistema decorrido 
 1106.034     1.561  1109.944 
